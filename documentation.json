{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthResponseData",
            "id": "interface-AuthResponseData-b8320aadcb7e7bb3a5b44c02f1ba9be1",
            "file": "src/app/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport { Router } from \"@angular/router\";\nimport { Anahtar } from \"./keys\";\n\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n\n  user = new BehaviorSubject<User>(null);\n  token: string = '';\n\n  private tokenExpirationTimer: any;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private anahtar: Anahtar\n    ){}\n  apiKey = this.anahtar.anahtar;\n\n  apiUrl: string = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=';\n  loginUrl: string = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key='\n\n  signup(email: string, password: string){\n    return this.http.post<AuthResponseData>(this.apiUrl + this.apiKey, {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(\n        resData.email,\n        resData.localId,\n        resData.idToken,\n        +resData.expiresIn\n        )\n\n    }))\n  }\n\n  logIn(email: string, password: string){\n    return this.http\n    .post<AuthResponseData>(this.loginUrl + this.apiKey, {email: email, password: password, returnSecureToken: true })\n    .pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(\n        resData.email,\n        resData.localId,\n        resData.idToken,\n        +resData.expiresIn\n        )\n    }))\n  }\n\n  logout(){\n    this.user.next(null);\n    this.router.navigate(['/auth']);\n    localStorage.removeItem('userData');\n\n    if(this.tokenExpirationTimer){\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n\n  autoLogout(expirationDuration: number){\n    this.tokenExpirationTimer =\n    setTimeout(()=>{\n      this.logout();\n    } , expirationDuration);\n  }\n\n  autoLogin(){\n    const userData :{\n      email: string;\n      id: string;\n      _token: string;\n      _tokenExpirationDate: string;\n    }= JSON.parse(localStorage.getItem('userData'));\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n    if(!userData){\n      return;\n    }\n    if(loadedUser.token){\n      this.user.next(loadedUser);\n      const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n      this.autoLogout(expirationDuration)\n    }\n  }\n\n\n\n  private handleAuthentication(\n    email: string,\n    userId: string,\n    token: string,\n    expiresIn: number){\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(\n        email,\n        userId,\n        token,\n        expirationDate\n        );\n        this.user.next(user);\n        this.autoLogout(expiresIn * 1000)\n        localStorage.setItem('userData', JSON.stringify(user))\n  }\n\n  private handleError(errorRes: HttpErrorResponse){\n    let errorMessage = \"An error occured!\";\n\n      if(!errorRes.error || !errorRes.error.error){\n        return throwError(errorMessage);\n      } else {\n        switch (errorRes.error.error.message){\n          case 'EMAIL_EXISTS':\n            errorMessage= 'The email address is already in use by another account.';\n            break;\n          case 'OPERATION_NOT_ALLOWED':\n            errorMessage = 'Password sign-in is disabled for this project.';\n            break;\n          case 'TOO_MANY_ATTEMPTS_TRY_LATER':\n            errorMessage = 'We have blocked all requests from this device due to unusual activity. Try again later.';\n            break;\n          case 'EMAIL_NOT_FOUND':\n            errorMessage = 'User not found';\n            break;\n          case 'INVALID_PASSWORD':\n            errorMessage = 'The password is invalid';\n            break;\n          case 'USER_DISABLED':\n            errorMessage = 'The user account has been disabled.';\n            break;\n          default:\n            errorMessage = 'An unknown error occurred!';\n            break;\n        }\n        return throwError(errorMessage)\n      }\n\n  }\n\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "expiresIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "idToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "kind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "localId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "registered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "Anahtar",
            "id": "injectable-Anahtar-42fa68cbc9595e5a29850ae8e2e18b32",
            "file": "src/app/auth/keys.ts",
            "properties": [
                {
                    "name": "anahtar",
                    "defaultValue": "'AIzaSyDVAePbjVFecVWGBAINdPa1YtZsIkZwBnM'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class Anahtar {\n  anahtar = 'AIzaSyDVAePbjVFecVWGBAINdPa1YtZsIkZwBnM';\n}\n",
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-b8320aadcb7e7bb3a5b44c02f1ba9be1",
            "file": "src/app/auth/auth.service.ts",
            "properties": [
                {
                    "name": "apiKey",
                    "defaultValue": "this.anahtar.anahtar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key='",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "loginUrl",
                    "defaultValue": "'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key='",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "token",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "tokenExpirationTimer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "new BehaviorSubject<User>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methods": [
                {
                    "name": "autoLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "autoLogout",
                    "args": [
                        {
                            "name": "expirationDuration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "expirationDuration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleAuthentication",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expiresIn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expiresIn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "errorRes",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "errorRes",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logIn",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signup",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport { Router } from \"@angular/router\";\nimport { Anahtar } from \"./keys\";\n\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n\n  user = new BehaviorSubject<User>(null);\n  token: string = '';\n\n  private tokenExpirationTimer: any;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private anahtar: Anahtar\n    ){}\n  apiKey = this.anahtar.anahtar;\n\n  apiUrl: string = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=';\n  loginUrl: string = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key='\n\n  signup(email: string, password: string){\n    return this.http.post<AuthResponseData>(this.apiUrl + this.apiKey, {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(\n        resData.email,\n        resData.localId,\n        resData.idToken,\n        +resData.expiresIn\n        )\n\n    }))\n  }\n\n  logIn(email: string, password: string){\n    return this.http\n    .post<AuthResponseData>(this.loginUrl + this.apiKey, {email: email, password: password, returnSecureToken: true })\n    .pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(\n        resData.email,\n        resData.localId,\n        resData.idToken,\n        +resData.expiresIn\n        )\n    }))\n  }\n\n  logout(){\n    this.user.next(null);\n    this.router.navigate(['/auth']);\n    localStorage.removeItem('userData');\n\n    if(this.tokenExpirationTimer){\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n\n  autoLogout(expirationDuration: number){\n    this.tokenExpirationTimer =\n    setTimeout(()=>{\n      this.logout();\n    } , expirationDuration);\n  }\n\n  autoLogin(){\n    const userData :{\n      email: string;\n      id: string;\n      _token: string;\n      _tokenExpirationDate: string;\n    }= JSON.parse(localStorage.getItem('userData'));\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n    if(!userData){\n      return;\n    }\n    if(loadedUser.token){\n      this.user.next(loadedUser);\n      const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n      this.autoLogout(expirationDuration)\n    }\n  }\n\n\n\n  private handleAuthentication(\n    email: string,\n    userId: string,\n    token: string,\n    expiresIn: number){\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(\n        email,\n        userId,\n        token,\n        expirationDate\n        );\n        this.user.next(user);\n        this.autoLogout(expiresIn * 1000)\n        localStorage.setItem('userData', JSON.stringify(user))\n  }\n\n  private handleError(errorRes: HttpErrorResponse){\n    let errorMessage = \"An error occured!\";\n\n      if(!errorRes.error || !errorRes.error.error){\n        return throwError(errorMessage);\n      } else {\n        switch (errorRes.error.error.message){\n          case 'EMAIL_EXISTS':\n            errorMessage= 'The email address is already in use by another account.';\n            break;\n          case 'OPERATION_NOT_ALLOWED':\n            errorMessage = 'Password sign-in is disabled for this project.';\n            break;\n          case 'TOO_MANY_ATTEMPTS_TRY_LATER':\n            errorMessage = 'We have blocked all requests from this device due to unusual activity. Try again later.';\n            break;\n          case 'EMAIL_NOT_FOUND':\n            errorMessage = 'User not found';\n            break;\n          case 'INVALID_PASSWORD':\n            errorMessage = 'The password is invalid';\n            break;\n          case 'USER_DISABLED':\n            errorMessage = 'The user account has been disabled.';\n            break;\n          default:\n            errorMessage = 'An unknown error occurred!';\n            break;\n        }\n        return throwError(errorMessage)\n      }\n\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "anahtar",
                        "type": "Anahtar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "anahtar",
                        "type": "Anahtar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataStorageService",
            "id": "injectable-DataStorageService-a226c06c93ba5028590225697f9e28ef",
            "file": "src/app/shared/data-storage.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'https://angular-recipebook-fb-default-rtdb.europe-west1.firebasedatabase.app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "fetchRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "storeRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { RecipeService } from \"../recipes/recipe.service\";\nimport { Recipe } from \"../recipes/recipe.model\";\nimport { exhaustMap, map, take, tap } from \"rxjs/operators\";\nimport { AuthService } from \"../auth/auth.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataStorageService {\n  constructor(\n    private http : HttpClient,\n    private recipesService : RecipeService,\n    private authService : AuthService\n    ){}\n  apiUrl: string = 'https://angular-recipebook-fb-default-rtdb.europe-west1.firebasedatabase.app'\n\n  storeRecipes(){\n    const recipes = this.recipesService.getRecipes();\n    this.http.put(this.apiUrl +'/recipes.json', recipes).subscribe( response => {\n\n    });\n  }\n\n  fetchRecipes(){\n      return this.http.get<Recipe[]>(this.apiUrl + '/recipes.json').pipe(map( recipes => {\n      return recipes.map(recipe => {\n        return {...recipe, ingredients: recipe.ingredients ? recipe.ingredients : []};\n      });\n    }), tap(recipes => { this.recipesService.setRecipes(recipes); }))\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recipesService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recipesService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RecipeService",
            "id": "injectable-RecipeService-1f84de3d583a7358da5855d1e950c612",
            "file": "src/app/recipes/recipe.service.ts",
            "properties": [
                {
                    "name": "recipes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "recipesChanged",
                    "defaultValue": "new Subject<Recipe[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "addIngrsToShoppingList",
                    "args": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRecipe",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getrecipe",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setRecipes",
                    "args": [
                        {
                            "name": "recipes",
                            "type": "Recipe[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "recipes",
                            "type": "Recipe[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRecipe",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newRecipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newRecipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Ingredient } from '../shared/ingredient.model';\nimport { ShoppingListService } from '../shopping-list/shopping-list.service';\nimport { Recipe } from './recipe.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecipeService {\n\n  recipesChanged = new Subject<Recipe[]>();\n\n\n  private recipes : Recipe[] = [];\n\n  // private recipes: Recipe[] = [\n  //   new Recipe('Spaghetti Genovese',\n  //    'This vegetarian pasta dish is the perfect solution when you want something quick and tasty - and everything cooked in one pan',\n  //   'https://images.immediate.co.uk/production/volatile/sites/30/2020/08/recipe-image-legacy-id-1845_10-e6b81e8.jpg',\n  //   [\n  //     new Ingredient('Spaghetti', 1),\n  //     new Ingredient('Green Bean', 3),\n  //     new Ingredient('Potato', 2)\n  //   ]),\n  //   new Recipe('Pork souvlaki',\n  //    'Serve our speedy pork souvlaki skewers when you’re in need of a quick and easy midweek meal. Serve with flatbreads and yogurt and chilli sauces on the side.',\n  //   'https://images.immediate.co.uk/production/volatile/sites/30/2020/08/pork-souvlaki-1380e9d.jpg',\n  //   [\n  //     new Ingredient('Lemon', 1),\n  //     new Ingredient('Garlic', 2),\n  //     new Ingredient('Lean Pork Shoulder', 1)\n  //   ])\n  // ];\n\n  setRecipes(recipes : Recipe[]){\n    this.recipes = recipes;\n    this.recipesChanged.next(this.recipes.slice());\n  }\n\n  getRecipes(){\n    return this.recipes.slice();\n  }\n\n  getrecipe(id: number){\n    return this.recipes[id];\n  }\n\n  constructor(private slService: ShoppingListService) { }\n\n\n  addIngrsToShoppingList(ingredients: Ingredient[]){\n    this.slService.addedIngredients(ingredients)\n  }\n\n\n  addRecipe(recipe: Recipe){\n    this.recipes.push(recipe);\n    this.recipesChanged.next(this.recipes.slice())\n  }\n\n  updateRecipe(index: number, newRecipe: Recipe){\n    this.recipes[index] = newRecipe;\n    this.recipesChanged.next(this.recipes.slice())\n  }\n\n  deleteRecipe(index: number){\n    this.recipes.splice(index, 1);\n    this.recipesChanged.next(this.recipes.slice());\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListService",
            "id": "injectable-ShoppingListService-ba996a97d4bedce423fc3d4a27564038",
            "file": "src/app/shopping-list/shopping-list.service.ts",
            "properties": [
                {
                    "name": "ingredients",
                    "defaultValue": "[\n    new Ingredient('Apples', 5),\n    new Ingredient('Tomato', 10)\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ingredientsChange",
                    "defaultValue": "new Subject<Ingredient[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "startedEditing",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "addedIngredients",
                    "args": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addIngredients",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIngredient",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getIngredients",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newIngredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newIngredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Ingredient } from '../shared/ingredient.model';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShoppingListService {\n\n  //@Output() ingredientsChange: EventEmitter<Ingredient[]> = new EventEmitter();\n\n  ingredientsChange = new Subject<Ingredient[]>();\n  startedEditing = new Subject<number>();\n\n  private ingredients: Ingredient [] = [\n    new Ingredient('Apples', 5),\n    new Ingredient('Tomato', 10)\n  ];\n\n  getIngredient(){\n    return this.ingredients.slice();\n  }\n\n  getIngredients(index: number){\n    return this.ingredients[index];\n  }\n\n  addIngredients(ingredient: Ingredient){\n    this.ingredients.push(ingredient);\n    this.ingredientsChange.next(this.ingredients.slice());\n  }\n\n  constructor() { }\n\n  addedIngredients(ingredients: Ingredient[]){\n\n    this.ingredients.push(...ingredients);\n    this.ingredientsChange.next(this.ingredients.slice())\n\n  }\n\n  updateIngredient(index: number, newIngredient: Ingredient){\n    this.ingredients[index] = newIngredient;\n    this.ingredientsChange.next(this.ingredients.slice());\n  }\n\n  deleteIngredient(index: number){\n    this.ingredients.splice(index,1);\n    this.ingredientsChange.next(this.ingredients.slice());\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-b3569c4f5747cbb6bc46093db88b97e8",
            "file": "src/app/auth/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean | UrlTree | Promise | Observable",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { map, take } from \"rxjs/operators\";\nimport { AuthService } from \"./auth.service\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private authService : AuthService,\n    private router: Router\n    ) {}\n\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) :\n  boolean | UrlTree |\n  Promise<boolean | UrlTree> |\n  Observable<boolean | UrlTree>{\n    return this.authService.user.pipe(take(1) ,map(user => {\n      //return !!user;\n      const isAuth = !!user;\n\n      if(isAuth){\n        return true;\n      }\n      return this.router.createUrlTree(['/auth']);\n\n\n\n    }));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "RecipesResolverService",
            "id": "injectable-RecipesResolverService-4664b114fab9e8fc93fdff23151043ad",
            "file": "src/app/recipes/recipes-resolver.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from \"@angular/router\";\nimport { DataStorageService } from \"../shared/data-storage.service\";\nimport { Recipe } from \"./recipe.model\";\nimport { RecipeService } from \"./recipe.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class RecipesResolverService implements Resolve<Recipe[]> {\n  constructor(private dataStorageService : DataStorageService, private recipesService : RecipeService){\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot){\n    const recipes = this.recipesService.getRecipes();\n\n    if(recipes.length === 0){\n      return this.dataStorageService.fetchRecipes();\n\n    } else {\n      return recipes;\n    }\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataStorageService",
                        "type": "DataStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recipesService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dataStorageService",
                        "type": "DataStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recipesService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthInterceptorService",
            "id": "injectable-AuthInterceptorService-7ab2734552f7523ec0676ceaf2a5e763",
            "file": "src/app/auth/auth-interceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { HttpHandler, HttpInterceptor, HttpParams, HttpRequest} from \"@angular/common/http\"\nimport { AuthService } from \"./auth.service\";\nimport { exhaustMap, take } from \"rxjs/operators\";\n\n@Injectable()\nexport class AuthInterceptorService implements HttpInterceptor{\n  constructor(\n    private authService : AuthService\n  ){}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n     return this.authService.user.pipe(\n       take(1),\n       exhaustMap(user => {\n         if(!user){\n           return next.handle(req)\n         }\n       const modifiedReq = req.clone({params: new HttpParams().set('auth', user.token)})\n      return next.handle(modifiedReq)\n    }))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "Ingredient",
            "id": "class-Ingredient-11d1135083499a25c613ca91996b0695",
            "file": "src/app/shared/ingredient.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Ingredient{\n  constructor(public name: string, public amount: number){\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoggingService",
            "id": "class-LoggingService-4eb38a147e29c3300c53d912e71652dd",
            "file": "src/app/logging.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\n//@Injectable({ providedIn: 'root'})\n\nexport class LoggingService {\n\n  lastlog: string;\n\n  printLog(message: string){\n    console.log(message);\n    console.log(this.lastlog);\n    this.lastlog = message;\n  }\n}\n",
            "properties": [
                {
                    "name": "lastlog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "printLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Recipe",
            "id": "class-Recipe-5323fb44e287c59596b940d7fee2757c",
            "file": "src/app/recipes/recipe.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Ingredient } from \"../shared/ingredient.model\";\n\nexport class Recipe {\n  public name: string;\n  public description: string;\n  public imagePath: string;\n  public ingredients: Ingredient[];\n\n  constructor(name: string, descrpition: string, imagePath: string, ingredients: Ingredient[]){\n    this.name = name;\n    this.description = descrpition;\n    this.imagePath = imagePath;\n    this.ingredients = ingredients;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "descrpition",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imagePath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ingredients",
                        "type": "Ingredient[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "descrpition",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imagePath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ingredients",
                        "type": "Ingredient[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ingredients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-7c731d16681f3bf5bcc07161435926cf",
            "file": "src/app/auth/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class User {\n\n  constructor(\n    public email: string,\n    public id: string,\n    private _token: string,\n    private _tokenExpirationDate: Date\n    ){}\n\n    get token(){\n      if(!this._tokenExpirationDate || new Date() > this._tokenExpirationDate){\n        return null;\n      }\n        return this._token;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_tokenExpirationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_tokenExpirationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "token": {
                    "name": "token",
                    "getSignature": {
                        "name": "token",
                        "type": "",
                        "returnType": "",
                        "line": 10
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "DropdownDirective",
            "id": "directive-DropdownDirective-5347aa247fb790bc688c455f645dbcc3",
            "file": "src/app/shared/dropdown.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appDropdown]'\n})\nexport class DropdownDirective {\n\n  @HostBinding('class.show') isOpen: Boolean = false;\n\n  @HostListener('click') toggleOpen(){\n    this.isOpen = !this.isOpen;\n\n\n  }\n\n  constructor() { }\n\n}\n",
            "selector": "[appDropdown]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.show",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "Boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10
                }
            ],
            "propertiesClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.show'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            }
        }
    ],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-2751bfe2b8abe1e97c15bf695c908543",
            "file": "src/app/shared/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [
                "./alert.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\n\n@Component({\n  selector: 'app-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.css']\n\n})\n\nexport class AlertComponent {\n\n @Input()  message: string;\n @Output() close = new EventEmitter<void>();\n\n onClose(){\n   this.close.emit();\n\n }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".backdrop{\n  position: fixed;\n  display: flex;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  background: rgba(0, 0, 0, .75);\n  z-index: 50;\n}\n\n.alert-box{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n\n  min-width: 20vw;\n  min-height: 20vh;\n  padding: 50px;\n  background: white;\n  border: 2px inset red;\n  border-radius: 4px;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, .4);\n  z-index: 51;\n}\n\n.alert-box-actions{\n  text-align: right;\n}\n",
                    "styleUrl": "./alert.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"backdrop\" (click)=\"onClose()\">\n  <div class=\"alert-box\">\n    <p>\n      {{ message }}\n    </p>\n    <div class=\"alert-box-actions\">\n      <button class=\"btn btn-danger\" (click)=\"onClose()\">\n        Okay\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-8eddc1fc2c89a570f8ec90afb58db7e1",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\nimport { LoggingService } from './logging.service';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n\n  constructor(private authService: AuthService,\n    private loggingService: LoggingService){}\n\n  ngOnInit(){\n    this.authService.autoLogin();\n    this.loggingService.printLog(\"Hello from AppComponent NgOninit\")\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loggingService",
                        "type": "LoggingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loggingService",
                        "type": "LoggingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header></app-header>\n<div class=\"container-fluid\">\n  <router-outlet></router-outlet>\n  <!-- <app-recipes *ngIf=\"loadedFeature === 'recipes'\"></app-recipes>\n  <app-shopping-list *ngIf=\"loadedFeature === 'shopping-list'\"></app-shopping-list> -->\n</div>\n"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-9ce3323917aea7a352a35d5f81e6aed5",
            "file": "src/app/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [
                "./auth.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoginMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onHandleError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "authForm",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "authForm",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSwitchMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthResponseData, AuthService } from './auth.service';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})\nexport class AuthComponent implements OnInit {\n\n  isLoginMode = true;\n  isLoading = false;\n  error: string = '';\n\n  constructor(\n    private AuthService : AuthService,\n    private router: Router\n    ) { }\n\n  ngOnInit(): void {\n  }\n\n  onSwitchMode(){\n    this.isLoginMode = !this.isLoginMode;\n  }\n\n  onSubmit(authForm: NgForm){\n\n    if(!authForm.valid){\n      return;\n    } else {\n      this.isLoading = true;\n      const email = authForm.value.email;\n      const password = authForm.value.password;\n      let authObs: Observable<AuthResponseData>;\n\n      if(this.isLoginMode){\n        authObs =  this.AuthService.logIn(email, password);\n\n      } else {\n       authObs = this.AuthService.signup(email, password);\n      }\n\n      authObs.subscribe(response => {\n        this.isLoading = false;\n        this.router.navigate(['/recipes'])\n      }, errorMessage => {\n\n        this.error = errorMessage;\n        this.isLoading = false;\n      });\n    }\n    authForm.reset();\n  }\n\n  onHandleError(){\n    this.error = null;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loading-spinner-box{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n",
                    "styleUrl": "./auth.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "AuthService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "AuthService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row mt-3\">\n  <div class=\"col-4 mx-auto\">\n\n    <!-- <div class=\"alert alert-danger\" *ngIf=\"error\">\n      <p>{{error}}</p>\n    </div> -->\n\n    <app-alert [message]=\"error\" *ngIf=\"error\" (close)=\"onHandleError()\"></app-alert>\n\n\n    <div class=\"loading-spinner-box\" *ngIf=\"isLoading\">\n      <app-loading-spinner></app-loading-spinner>\n    </div>\n    <form #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\" *ngIf=\"!isLoading\">\n      <div class=\"form-group\">\n        <label for=\"email\">E-mail</label>\n        <input\n        type=\"email\"\n        id=\"email\"\n        class=\"form-control\"\n        ngModel\n        name=\"email\"\n        required\n        email\n        >\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">Password</label>\n        <input\n        type=\"password\"\n        id=\"password\"\n        class=\"form-control\"\n        ngModel\n        name=\"password\"\n        required\n        minlength=\"6\"\n        >\n      </div>\n      <div class=\"form-group mt-3\">\n        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!authForm.valid\">\n          {{ isLoginMode ? 'Login' : 'Sign Up'}}\n        </button>\n        <button class=\"btn btn-success ms-3\" type=\"button\" (click)=\"onSwitchMode()\">\n          {{ isLoginMode ? 'Switch to Sign Up' : 'Switch to Login'}}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3c8de7bfe8970fcccc82f33ab775512b",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "linkSelected",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isAuth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "userSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\nimport { AuthService } from \"../auth/auth.service\";\nimport { DataStorageService } from \"../shared/data-storage.service\";\n@Component(\n  {\n  selector: 'app-header',\n  templateUrl: 'header.component.html',\n  styleUrls: ['header.component.css']\n  }\n)\nexport class HeaderComponent implements OnInit, OnDestroy{\n  isAuth = false;\n  private userSub!: Subscription;\n\n  constructor(\n    private dataStorageService: DataStorageService,\n    private authService: AuthService\n    ){ }\n  @Output() linkSelected: EventEmitter<string> = new EventEmitter();\n\n  ngOnInit(){\n    this.userSub = this.authService.user.subscribe(\n      user => {\n        this.isAuth = !!user;\n      }\n    );\n  }\n\n  ngOnDestroy(){\n    this.userSub.unsubscribe();\n  }\n\n  onSelect(link: string){\n    this.linkSelected.emit(link)\n  }\n  onSaveData(){\n    this.dataStorageService.storeRecipes();\n  }\n\n  onFetchData(){\n    this.dataStorageService.fetchRecipes().subscribe()\n\n  }\n\n  onLogout(){\n    this.authService.logout();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".show > .dropdown-menu{\n  display: block;\n}\n",
                    "styleUrl": "header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataStorageService",
                        "type": "DataStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dataStorageService",
                        "type": "DataStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<nav class=\"navbar navbar-dark navbar-expand-lg bg-danger\">\n    <div class=\"container-fluid\">\n      <a  class=\"navbar-brand\">RecipeBook</a>\n      <div class=\"collapse navbar-collapse\">\n        <ul class=\"nav navbar-nav\">\n          <li class=\"nav-item\" *ngIf=\"isAuth\">\n            <a class=\"nav-link\" routerLink=\"/recipes\" routerLinkActive=\"active\">Recipes</a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" routerLink=\"/shopping-list\" routerLinkActive=\"active\">Shopping List</a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" routerLink=\"/auth\" routerLinkActive=\"active\" *ngIf=\"!isAuth\">Authenticate</a>\n          </li>\n        </ul>\n        <ul class=\"nav navbar-nav navbar-right ms-auto\">\n          <li class=\"nav-item\" *ngIf=\"isAuth\"><a class=\"nav-link\" (click)=\"onLogout()\" style=\"cursor: pointer;\">Logout</a></li>\n          <li class=\"nav-item dropdown\" appDropdown *ngIf=\"isAuth\">\n            <a  class=\"nav-link dropdown-toggle\" role=\"button\">Manage</a>\n            <ul class=\"dropdown-menu end-0\">\n              <li><a  class=\"dropdown-item\" (click)=\"onSaveData()\" style=\"cursor: pointer;\">Save Data</a></li>\n              <li><a  class=\"dropdown-item\" (click)=\"onFetchData()\" style=\"cursor: pointer;\">Fetch Data</a></li>\n            </ul>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </nav>\n"
        },
        {
            "name": "LoadingSpinnerComponent",
            "id": "component-LoadingSpinnerComponent-c934afd8e126902db518794496306543",
            "file": "src/app/shared/loading-spinner/loading-spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-spinner",
            "styleUrls": [
                "./loading-spinner.component.css"
            ],
            "styles": [],
            "template": "<div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n\n@Component({\n  selector: 'app-loading-spinner',\n  template: '<div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>',\n  styleUrls: ['./loading-spinner.component.css']\n})\n\n\nexport class LoadingSpinnerComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".lds-ring {\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n}\n.lds-ring div {\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  width: 64px;\n  height: 64px;\n  margin: 8px;\n  border: 8px solid red;\n  border-radius: 50%;\n  animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n  border-color:red transparent transparent transparent;\n}\n.lds-ring div:nth-child(1) {\n  animation-delay: -0.45s;\n}\n.lds-ring div:nth-child(2) {\n  animation-delay: -0.3s;\n}\n.lds-ring div:nth-child(3) {\n  animation-delay: -0.15s;\n}\n@keyframes lds-ring {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n",
                    "styleUrl": "./loading-spinner.component.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RecipeDetailComponent",
            "id": "component-RecipeDetailComponent-6b4654ab9af19cb28988a4851eec7074",
            "file": "src/app/recipes/recipe-detail/recipe-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-detail",
            "styleUrls": [
                "./recipe-detail.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "recipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddToShoppingList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-detail',\n  templateUrl: './recipe-detail.component.html',\n  styleUrls: ['./recipe-detail.component.css']\n})\nexport class RecipeDetailComponent implements OnInit {\n\n  recipe!: Recipe;\n  id!: number;\n\n  constructor(private recipeService : RecipeService,\n    private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(\n      (params: Params) => {\n        this.id = +params['id'];\n        this.recipe = this.recipeService.getrecipe(this.id)\n      }\n    )\n  }\n\n  onAddToShoppingList(){\n    this.recipeService.addIngrsToShoppingList(this.recipe.ingredients);\n    this.router.navigate(['/shopping-list']);\n\n  }\n\n  onEditRecipe(){\n    this.router.navigate(['edit'], {relativeTo: this.route});\n    //this.router.navigate(['../', this.id, 'edit'], {relativeTo: this.route})\n  }\n\n  onDeleteRecipe(){\n    this.recipeService.deleteRecipe(this.id);\n    this.router.navigate(['/recipes']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".show > .dropdown-menu{\n  display: block;\n}\n",
                    "styleUrl": "./recipe-detail.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row mt-1\">\n  <div class=\"col\">\n    <img [src]=\"recipe.imagePath\" alt=\"{{recipe.name}}\" class=\"img-responsive\" style=\"max-height: 300px;\">\n  </div>\n</div>\n<div class=\"row mt-1\">\n  <div class=\"col\">\n    <h1>{{recipe.name}}</h1>\n  </div>\n</div>\n<div class=\"row mt-1\">\n  <div class=\"btn-group\" appDropdown>\n    <button type=\"button\" class=\"btn btn-danger dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n      Manage Recipe\n    </button>\n    <ul class=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop1\">\n      <li><a class=\"dropdown-item\" (click)=\"onAddToShoppingList()\">To Shopping list</a></li>\n      <li><a class=\"dropdown-item\" (click)=\"onEditRecipe()\">Edit Recipe</a></li>\n      <li><a class=\"dropdown-item\" (click)=\"onDeleteRecipe()\">Delete Recipe</a></li>\n    </ul>\n\n  </div>\n</div>\n<div class=\"row mt-1\">\n  <div class=\"col\">\n    <p>\n      {{recipe.description}}\n    </p>\n  </div>\n</div>\n<div class=\"row mt-1\">\n  <div class=\"col\">\n    <ul class=\"list-group\">\n      <li class=\"list-group-item\" *ngFor=\"let ingredient of recipe.ingredients\">{{ingredient.name}} - {{ingredient.amount}}</li>\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "RecipeEditComponent",
            "id": "component-RecipeEditComponent-b491d91c12a683cc70ccc3aeb2a4817b",
            "file": "src/app/recipes/recipe-edit/recipe-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-edit",
            "styleUrls": [
                "./recipe-edit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "recipeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddIngredient",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { RecipeService } from '../recipe.service';\n\n@Component({\n  selector: 'app-recipe-edit',\n  templateUrl: './recipe-edit.component.html',\n  styleUrls: ['./recipe-edit.component.css']\n})\nexport class RecipeEditComponent implements OnInit {\n  id!: number;\n  editMode = false;\n  recipeForm!: FormGroup;\n\n  constructor(\n    private route: ActivatedRoute,\n    private recipeService: RecipeService,\n    private router: Router\n    ) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(\n      (params: Params ) => {\n        this.id = +params['id'];\n        this.editMode = params['id'] != null;\n        this.initForm();\n\n      }\n    );\n  }\n  private initForm(){\n    let recipeName = '';\n    let recipeImagePath = '';\n    let recipeDescription ='';\n    let recipeIngredients = new FormArray([]);\n\n    if(this.editMode){\n      const recipe = this.recipeService.getrecipe(this.id);\n      recipeName = recipe.name;\n      recipeImagePath = recipe.imagePath;\n      recipeDescription = recipe.description;\n\n      if(recipe['ingredients']){\n        for (let ingredient of recipe.ingredients){\n          recipeIngredients.push(new FormGroup({\n            'name': new FormControl(ingredient.name, [Validators.required, Validators.minLength(3)]),\n            'amount': new FormControl(ingredient.amount, [Validators.required, Validators.pattern(/^[1-9]+[0-9]*$/)])\n          }))\n        }\n\n      }\n    }\n    this.recipeForm = new FormGroup({\n      'name' : new FormControl(recipeName, [Validators.required, Validators.minLength(3)]),\n      'imagePath': new FormControl(recipeImagePath,[Validators.required]),\n      'description': new FormControl(recipeDescription, [Validators.required]),\n      'ingredients': recipeIngredients\n    });\n  }\n  onAddIngredient(){\n    (<FormArray>this.recipeForm.get('ingredients')).push(\n      new FormGroup({\n        'name': new FormControl(null, [Validators.required, Validators.minLength(3)]),\n        'amount': new FormControl(null, [Validators.required, Validators.pattern(/^[1-9]+[0-9]*$/)])\n      })\n    )\n  }\n\n  get controls() { // a getter!\n    return (<FormArray>this.recipeForm.get('ingredients')).controls;\n  }\n\n  onSubmit(){\n    // const newRecipe = new Recipe(this.recipeForm.value['name'],\n    // this.recipeForm.value['description'],\n    // this.recipeForm.value['imagePath'],\n    // this.recipeForm.value['ingredients']);\n    if(this.editMode){\n      this.recipeService.updateRecipe(this.id, this.recipeForm.value )\n    } else {\n      this.recipeService.addRecipe(this.recipeForm.value)\n    }\n    this.onCancel();\n  }\n\n  onCancel(){\n    this.router.navigate(['../'], {relativeTo: this.route})\n  }\n\n  onDeleteIngredient(index: number){\n\n    (<FormArray>this.recipeForm.get('ingredients')).removeAt(index);\n\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input.ng-invalid.ng-touched,\ntextarea.ng-invalid.ng-touched{\n  border: 1px solid red;\n}\n",
                    "styleUrl": "./recipe-edit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                }
            },
            "templateData": "<div class=\"row\">\n  <div class=\"col\">\n    <form [formGroup]=\"recipeForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!recipeForm.valid\">Save</button>\n          <button type=\"button\" class=\"btn btn-danger\" (click)=\"onCancel()\">Cancel</button>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <div class=\"form-group\">\n            <label for=\"name\">Name</label>\n            <input type=\"text\" name=\"name\" id=\"name\" class=\"form-control\" formControlName=\"name\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"imagePath\">Image Path</label>\n            <input\n            type=\"text\"\n            name=\"imagePath\"\n            id=\"imagePath\"\n            class=\"form-control\"\n            formControlName=\"imagePath\"\n            #imagePath>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <img [src]=\"imagePath.value\" alt=\"\" class=\"img-responsive\" style=\"max-width: 300px\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"description\">Description</label>\n          <textarea type=\"text\" name=\"description\" id=\"description\" class=\"form-control\" rows=\"6\" formControlName=\"description\"></textarea>\n        </div>\n      </div>\n      <div class=\"row mt-3\">\n        <div class=\"col\" formArrayName=\"ingredients\">\n          <div class=\"row mt-2\" *ngFor=\" let ingredientCtrl of controls; let i = index \" [formGroupName]=\"i\">\n            <div class=\"col-8\">\n              <input type=\"text\" class=\"form-control\" formControlName=\"name\" placeholder=\"Ingredient\">\n            </div>\n            <div class=\"col-3\">\n              <input type=\"number\" class=\"form-control\" formControlName=\"amount\" placeholder=\"Amount\">\n            </div>\n            <div class=\"col-1\">\n              <button\n              class=\"btn btn-danger\"\n              type=\"button\"\n              (click)=\"onDeleteIngredient(i)\"\n              >X</button>\n            </div>\n          </div>\n          <div class=\"row mt-2\">\n            <div class=\"col\">\n              <button type=\"button\" class=\"btn btn-success\" (click)=\"onAddIngredient()\">Add Ingredients</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "RecipeItemComponent",
            "id": "component-RecipeItemComponent-7dc6337c86c15185cf2bd7bf3d3986a6",
            "file": "src/app/recipes/recipe-list/recipe-item/recipe-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[app-recipe-item]",
            "styleUrls": [
                "./recipe-item.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number"
                },
                {
                    "name": "recipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Recipe"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Recipe } from '../../recipe.model';\n\n@Component({\n  selector: '[app-recipe-item]',\n  templateUrl: './recipe-item.component.html',\n  styleUrls: ['./recipe-item.component.css']\n})\nexport class RecipeItemComponent implements OnInit {\n @Input() recipe!: Recipe;\n @Input() index!: number;\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recipe-item.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n  <img class=\"card-img-top\" [src]=\"recipe.imagePath\" alt=\"{{recipe.name}}\">\n  <div class=\"card-body\" routerLinkActive=\"bg-danger text-white\">\n    <h5 class=\"card-title\">{{recipe.name}}</h5>\n    <p class=\"card-text\">{{recipe.description}}</p>\n   <a class=\"btn btn-danger\" [routerLink]=\"[index]\" routerLinkActive=\"bg-white text-danger\">Recipe Detail</a>\n  </div>\n\n"
        },
        {
            "name": "RecipeListComponent",
            "id": "component-RecipeListComponent-9465523697f71e635f98540c3d53a9e5",
            "file": "src/app/recipes/recipe-list/recipe-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-list",
            "styleUrls": [
                "./recipe-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "recipes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNewRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Recipe } from '../recipe.model';\nimport { RecipeService } from '../recipe.service';\n@Component({\n  selector: 'app-recipe-list',\n  templateUrl: './recipe-list.component.html',\n  styleUrls: ['./recipe-list.component.css']\n})\nexport class RecipeListComponent implements OnInit, OnDestroy {\n  recipes: Recipe[];\n  subscription!: Subscription;\n\n\n\n  constructor(private recipeService: RecipeService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.subscription = this.recipeService.recipesChanged.subscribe(\n      (recipes: Recipe[])=>{\n        this.recipes = recipes;\n      }\n    );\n    this.recipes = this.recipeService.getRecipes();\n\n  }\n\n  onNewRecipe(){\n    this.router.navigate(['new'], {relativeTo: this.route});\n  }\n\n  ngOnDestroy(){\n    this.subscription.unsubscribe();\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card-group{\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  max-width: 100%;\n}\n",
                    "styleUrl": "./recipe-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <button class=\"btn btn-success\" (click)=\"onNewRecipe()\">Add Recipe</button>\n    </div>\n    <!-- <div class=\"col-xs-12\">\n      <a href=\"#\" class=\"list-group-item clearfix\" *ngFor=\"let recipe of recipes\">\n        <div class=\"col-8\">\n          <h4 class=\"list-group-item-heading\"> {{recipe.name}}</h4>\n          <p class=\"list-group-item-text\">\n            {{recipe.description}}\n          </p>\n        </div>\n        <div class=\"col-4\">\n          <img src=\"{{recipe.imagePath}}\" alt=\"{{recipe.name}}\" class=\"img-responsive\" style=\"max-height: 60px;\">\n        </div>\n      </a>\n      <app-recipe-item></app-recipe-item>\n    </div> -->\n  </div>\n  <div class=\"row mt-2\">\n\n    <div class=\"card-group\">\n      <div class=\"card\" app-recipe-item *ngFor=\"let recipeEl of recipes; let i = index\" [recipe]=\"recipeEl\" [index]=\"i\"></div>\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "RecipesComponent",
            "id": "component-RecipesComponent-b3c0fb172f809a953cca2068c0d5641e",
            "file": "src/app/recipes/recipes.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipes",
            "styleUrls": [
                "./recipes.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipes.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-recipes',\n  templateUrl: './recipes.component.html',\n  styleUrls: ['./recipes.component.css']\n})\nexport class RecipesComponent implements OnInit {\n\n\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recipes.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n  <div class=\"row mt-3\">\n    <div class=\"col\">\n      <app-recipe-list></app-recipe-list>\n    </div>\n    <div class=\"col\">\n      <router-outlet></router-outlet>\n    </div>\n  </div>\n\n"
        },
        {
            "name": "RecipeStartComponent",
            "id": "component-RecipeStartComponent-fcd17f8a817d815d1892fc3aab3013a5",
            "file": "src/app/recipes/recipe-start/recipe-start.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-start",
            "styleUrls": [
                "./recipe-start.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-start.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-recipe-start',\n  templateUrl: './recipe-start.component.html',\n  styleUrls: ['./recipe-start.component.css']\n})\nexport class RecipeStartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recipe-start.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>Plase select a recipe!</h2>\n"
        },
        {
            "name": "ShoppingEditComponent",
            "id": "component-ShoppingEditComponent-e20665a8b79ceeea62e541230ceb9119",
            "file": "src/app/shopping-list/shopping-edit/shopping-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-edit",
            "styleUrls": [
                "./shopping-edit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "editedItemIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "slForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'f', {static: false}"
                        }
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { Ingredient } from 'src/app/shared/ingredient.model';\nimport { ShoppingListService } from '../shopping-list.service';\n\n@Component({\n  selector: 'app-shopping-edit',\n  templateUrl: './shopping-edit.component.html',\n  styleUrls: ['./shopping-edit.component.css']\n})\nexport class ShoppingEditComponent implements OnInit, OnDestroy {\n  @ViewChild('f', {static: false}) slForm! : NgForm;\n  subscription!: Subscription;\n  editMode = false;\n  editedItemIndex!: number;\n  editedItem!: Ingredient;\n\n\n\n  constructor(private slService: ShoppingListService) { }\n\n  ngOnInit(): void {\n    this.subscription =this.slService.startedEditing.subscribe(\n      (index: number)=>{\n        this.editedItemIndex = index;\n        this.editMode = true;\n        this.editedItem = this.slService.getIngredients(index);\n        this.slForm.setValue({\n          name: this.editedItem.name,\n          amount: this.editedItem.amount\n        })\n\n\n      }\n    );\n  }\n  ngOnDestroy(){\n    this.subscription.unsubscribe();\n  }\n\n  onSubmit(form: NgForm){\n    const value = form.value;\n    const newIngredient = new Ingredient( value.name, value.amount);\n\n    if(this.editMode){\n      this.slService.updateIngredient(this.editedItemIndex, newIngredient)\n    } else {\n      this.slService.addIngredients(newIngredient);\n    }\n    this.editMode = false;\n    form.reset();\n  }\n\n  onClear(){\n    this.slForm.reset();\n    this.editMode = false;\n  }\n\n  onDelete(){\n    this.slService.deleteIngredient(this.editedItemIndex);\n    this.onClear();\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping-edit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row mt-1\">\n  <div class=\"col\">\n    <form (ngSubmit)=\"onSubmit(f)\" #f=\"ngForm\">\n      <div class=\"row mt-1\">\n        <div class=\"col-4 form-group\">\n          <label for=\"\" class=\"form-label\">Name</label>\n          <input\n          type=\"text\"\n          id=\"name\"\n          class=\"form-control\"\n          name=\"name\"\n          ngModel\n          required\n          minlength=\"3\"\n          >\n        </div>\n        <div class=\"col-4 form-group\">\n          <label for=\"\" class=\"form-label\">Amount</label>\n          <input\n          type=\"number\"\n          id=\"amount\"\n          class=\"form-control\"\n          name=\"amount\"\n          ngModel\n          required\n          pattern=\"^[1-9]+[0-9]*$\"\n          >\n        </div>\n      </div>\n      <div class=\"row mt-2\">\n        <div class=\"col\">\n        <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!f.valid\">\n          {{ editMode ? 'Update': 'Add'}}\n        </button>\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"onClear()\">Clear</button>\n        <button\n        type=\"button\"\n        class=\"btn btn-danger\"\n        (click)=\"onDelete()\"\n        *ngIf=\"editMode\">Delete</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n"
        },
        {
            "name": "ShoppingListComponent",
            "id": "component-ShoppingListComponent-243aa57d1e2a3c4bed979d22dd236175",
            "file": "src/app/shopping-list/shopping-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list",
            "styleUrls": [
                "./shopping-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "igChangeSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ingredients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { LoggingService } from '../logging.service';\nimport { Ingredient } from '../shared/ingredient.model';\nimport { ShoppingListService } from './shopping-list.service';\n@Component({\n  selector: 'app-shopping-list',\n  templateUrl: './shopping-list.component.html',\n  styleUrls: ['./shopping-list.component.css']\n})\nexport class ShoppingListComponent implements OnInit, OnDestroy {\n\n  ingredients!: Ingredient [];\n  private igChangeSub!: Subscription;\n\n  constructor(private slService: ShoppingListService,\n    private loggingService: LoggingService) { }\n\n  ngOnInit(): void {\n    this.ingredients = this.slService.getIngredient();\n    this.igChangeSub = this.slService.ingredientsChange.subscribe((ingredients: Ingredient[]) => {\n      this.ingredients = ingredients;\n    });\n\n    this.loggingService.printLog(\"Hello from ShoppingList ngOnInit\")\n\n\n  }\n  ngOnDestroy(){\n    this.igChangeSub.unsubscribe();\n  }\n\n  onEditItem(index: number){\n\n    this.slService.startedEditing.next(index);\n\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loggingService",
                        "type": "LoggingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "slService",
                        "type": "ShoppingListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loggingService",
                        "type": "LoggingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container-fluid\">\n  <div class=\"row mt-3\">\n    <div class=\"col\">\n      <app-shopping-edit></app-shopping-edit>\n      <hr>\n      <div class=\"list-group\">\n        <a\n        class=\"list-group-item list-group-item-action\"\n        *ngFor=\"let ingredient of ingredients; let i=index\"\n        (click)=\"onEditItem(i)\"\n        >\n          {{ingredient.name}} {{ingredient.amount}}\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-8cac7d1ebb48f359fa6d87b10a8f3b12",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { SharedModule } from './shared/shared.module';\nimport { CoreModule } from './core.module';\nimport { LoggingService } from './logging.service';\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    SharedModule,\n    CoreModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-52cb8c0da96477856305eb75e2b0f6fe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst appRoutes: Routes = [\n  {path: '', redirectTo: '/recipes', pathMatch: 'full'},\n  {path: 'recipes', loadChildren: () => \"import('./recipes/recipes.module').then(m => m.RecipesModule)\"},\n  {path: 'shopping-list', loadChildren: () => \"import('./shopping-list/shopping-list.module').then(m => m.ShoppingListModule)\"},\n  {path: 'auth', loadChildren: ()=> \"import('./auth/auth.module').then(m => m.AuthModule)\"}\n];\n@NgModule({\n  imports: [RouterModule.forRoot(appRoutes, {preloadingStrategy: PreloadAllModules})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-e2013c037a2f3962770ca7fa74fe33a3-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-2756d790e3859004ff5c91553094248f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { AuthComponent } from \"./auth.component\";\n@NgModule({\n  declarations: [AuthComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild([{path: '', component: AuthComponent}]),\n    SharedModule\n  ]\n})\nexport class AuthModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-0c50498430ad81c4fd75c39a1aef1ea7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core.module.ts",
            "methods": [],
            "sourceCode": "import { HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { NgModule } from \"@angular/core\";\nimport { AuthInterceptorService } from \"./auth/auth-interceptor.service\";\nimport { RecipeService } from \"./recipes/recipe.service\";\nimport { ShoppingListService } from \"./shopping-list/shopping-list.service\";\n\n@NgModule({\n\n  providers: [\n     ShoppingListService, RecipeService, { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptorService, multi: true}\n  ]\n\n})\n\nexport class CoreModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptorService"
                        },
                        {
                            "name": "RecipeService"
                        },
                        {
                            "name": "ShoppingListService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecipesModule",
            "id": "module-RecipesModule-2b4e3840eeb9ccdf28844664d78b3f97",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/recipes/recipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { RecipeDetailComponent } from \"./recipe-detail/recipe-detail.component\";\nimport { RecipeEditComponent } from \"./recipe-edit/recipe-edit.component\";\nimport { RecipeItemComponent } from \"./recipe-list/recipe-item/recipe-item.component\";\nimport { RecipeListComponent } from \"./recipe-list/recipe-list.component\";\nimport { RecipeStartComponent } from \"./recipe-start/recipe-start.component\";\nimport { RecipesRoutingModule } from \"./recipes-routing.module\";\nimport { RecipesComponent } from \"./recipes.component\";\n\n@NgModule({\n  declarations: [\n    RecipesComponent,\n    RecipeListComponent,\n    RecipeDetailComponent,\n    RecipeItemComponent,\n    RecipeStartComponent,\n    RecipeEditComponent\n  ],\n  imports: [SharedModule, ReactiveFormsModule, RouterModule, RecipesRoutingModule]\n})\n\nexport class RecipesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RecipeDetailComponent"
                        },
                        {
                            "name": "RecipeEditComponent"
                        },
                        {
                            "name": "RecipeItemComponent"
                        },
                        {
                            "name": "RecipeListComponent"
                        },
                        {
                            "name": "RecipeStartComponent"
                        },
                        {
                            "name": "RecipesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RecipesRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecipesRoutingModule",
            "id": "module-RecipesRoutingModule-3bcff6d120bb24823847572cf37f65f2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/recipes/recipes-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { AuthGuard } from \"../auth/auth.guard\";\nimport { RecipeDetailComponent } from \"./recipe-detail/recipe-detail.component\";\nimport { RecipeEditComponent } from \"./recipe-edit/recipe-edit.component\";\nimport { RecipeStartComponent } from \"./recipe-start/recipe-start.component\";\nimport { RecipesResolverService } from \"./recipes-resolver.service\";\nimport { RecipesComponent } from \"./recipes.component\";\n\nconst routes: Routes = [\n  {path: '', component: RecipesComponent, canActivate: [AuthGuard] , resolve: [RecipesResolverService],  children: [\n    {path: '', component: RecipeStartComponent},\n    {path: 'new', component: RecipeEditComponent},\n    {path: ':id', component: RecipeDetailComponent, resolve: [RecipesResolverService]},\n    {path: ':id/edit', component: RecipeEditComponent, resolve: [RecipesResolverService]}\n  ]},\n]\n\n@NgModule({\n  imports: [ RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\n\nexport class RecipesRoutingModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-8c2ed893e174f67896bc0ed8ba256984",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { LoggingService } from \"../logging.service\";\nimport { AlertComponent } from \"./alert/alert.component\";\nimport { DropdownDirective } from \"./dropdown.directive\";\nimport { LoadingSpinnerComponent } from \"./loading-spinner/loading-spinner.component\";\n\n@NgModule({\n  declarations: [\n    AlertComponent,\n    LoadingSpinnerComponent,\n    DropdownDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    AlertComponent,\n    LoadingSpinnerComponent,\n    DropdownDirective,\n    CommonModule\n  ],\n  providers: [LoggingService]\n})\n\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "LoadingSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "LoadingSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingListModule",
            "id": "module-ShoppingListModule-6f9f8ba8d55c35ffa487ae038006937e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shopping-list/shopping-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule } from \"@angular/router\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { ShoppingEditComponent } from \"./shopping-edit/shopping-edit.component\";\nimport { ShoppingListComponent } from \"./shopping-list.component\";\n\n\n@NgModule({\n  declarations: [\n    ShoppingListComponent,\n    ShoppingEditComponent,\n  ],\n  imports: [ SharedModule, FormsModule, RouterModule.forChild([\n      {path: '', component: ShoppingListComponent},\n    ])\n  ]\n\n})\n\nexport class ShoppingListModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShoppingEditComponent"
                        },
                        {
                            "name": "ShoppingListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\n  component: HeaderComponent,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\n  component: HeaderComponent,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "appRoutes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/recipes",
                        "pathMatch": "full"
                    },
                    {
                        "path": "recipes",
                        "loadChildren": "./recipes/recipes.module#RecipesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/recipes/recipes-routing.module.ts",
                                        "module": "RecipesRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "RecipesComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "resolve": [
                                                    "RecipesResolverService"
                                                ],
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "RecipeStartComponent"
                                                    },
                                                    {
                                                        "path": "new",
                                                        "component": "RecipeEditComponent"
                                                    },
                                                    {
                                                        "path": ":id",
                                                        "component": "RecipeDetailComponent",
                                                        "resolve": [
                                                            "RecipesResolverService"
                                                        ]
                                                    },
                                                    {
                                                        "path": ":id/edit",
                                                        "component": "RecipeEditComponent",
                                                        "resolve": [
                                                            "RecipesResolverService"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "RecipesModule"
                            }
                        ]
                    },
                    {
                        "path": "shopping-list",
                        "loadChildren": "./shopping-list/shopping-list.module#ShoppingListModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ShoppingListModule"
                            }
                        ]
                    },
                    {
                        "path": "auth",
                        "loadChildren": "./auth/auth.module#AuthModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "AuthModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthResponseData",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/keys.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "Anahtar",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/user.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/logging.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoggingService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-detail/recipe-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-edit/recipe-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-list/recipe-item/recipe-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-list/recipe-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-start/recipe-start.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeStartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Recipe",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RecipeService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipes-resolver.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RecipesResolverService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipes.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/data-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ingredient.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Ingredient",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/loading-spinner/loading-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/shopping-edit/shopping-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/shopping-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/shopping-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}